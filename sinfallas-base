#!/usr/bin/env bash
# Made by Sinfallas <sinfallas@yahoo.com>
# Licence: GPL-2
#set -euo pipefail
LC_ALL=C
SECONDS=0
mylog="/var/log/$(basename $0).log"
LOCKFILE="/tmp/$(basename $0)_$(whoami)"
LOCKFD="150"
quien=$(who | cut -d' ' -f1 | sort | uniq)
ss=/home/$quien/.ssh
gg=/home/$quien/.gnupg
gdonde=$gg/gpg.conf

function calcmem() {
	name="/etc/sysctl.d/10-calc-mem.conf"
	memor=$(grep MemTotal /proc/meminfo | awk '{print $2}')
	mb=$(( $memor * 1024 ))
	mf=$(( $memor * 3/100 ))
	fm=$(( $mb / 4194304 * 256 ))
	mo=$(( $mb * 0,10 / 65536 ))
	mt=$(( $fm * 2 ))
	page_size=$(getconf PAGE_SIZE)
	phys_pages=$(getconf _PHYS_PAGES)
	shmall=$(( $phys_pages / 2 ))
	shmmax=$(( $shmall * $page_size ))
	echo "kernel.shmmax = $shmmax" > "$name"
	echo "kernel.shmall = $shmall" >> "$name"
	echo "vm.min_free_kbytes = $mf" >> "$name"
	echo "fs.file-max = $fm" >> "$name"
	#echo "net.ipv4.tcp_max_orphans = $mo" >> "$name"
	echo "net.ipv4.tcp_max_tw_buckets = $mt" >> "$name"
	if (( $memor < 1024000 )); then
	        echo "vm.dirty_ratio = 25" >> "$name"
	        echo "vm.dirty_background_ratio = 15" >> "$name"
	        echo "vm.dirty_expire_centisecs = 750" >> "$name"
	        echo "vm.dirty_writeback_centisecs = 125" >> "$name"
	else
	        if (( $memor > 4096000 )); then
	            echo "vm.swappiness = 10" >> "$name"
	            echo "vm.vfs_cache_pressure = 50" >> "$name"
	        fi
	        if (( $memor < 8192000 )); then
	            echo "vm.dirty_ratio = 12" >> "$name"
	            echo "vm.dirty_background_ratio = 10" >> "$name"
	            echo "vm.dirty_expire_centisecs = 1500" >> "$name"
	            echo "vm.dirty_writeback_centisecs = 250" >> "$name"
	        else
	            echo "vm.dirty_ratio = 3" >> "$name"
	            echo "vm.dirty_background_ratio = 5" >> "$name"
	            echo "vm.dirty_expire_centisecs = 3000" >> "$name"
	            echo "vm.dirty_writeback_centisecs = 500" >> "$name"
	        fi
	fi
	sysctl --system > /dev/null
}

function clean_1() {
	rm -f /run/$(basename $0).pid
	rm -rf /tmp/*
	rm -rf /var/tmp/*
	rm -f $LOCKFILE
}

function lock() {
	echo {LOCKFD}>$LOCKFILE
	flock -n $LOCKFD
}

function exit_error() {
	echo -e "\e[00;31mYa hay una instancia en ejecuciÃ³n. Saliendo\e[00m"
	exit 1
}

trap "clean_1; exit" 0 1 2 3 15
clear
if [[ "$EUID" != "0" ]]; then
	echo -e "\e[00;31mERROR: Debes ser root.\e[00m"
	exit 1
fi
echo $BASHPID > /run/"$(basename $0)".pid
echo "" > $mylog
exec 2>>$mylog

lock || exit_error

echo $quien
if [[ -z $(grep -i 'tmpfs /tmp tmpfs rw,nodev,noatime,nosuid,noexec 0 0' /etc/fstab) ]]; then
	echo "tmpfs /tmp tmpfs rw,nodev,noatime,nosuid,noexec 0 0" >> /etc/fstab
fi
if [[ -z $(grep -i 'tmpfs /var/cache/samba tmpfs rw,noatime,nodev 0 0' /etc/fstab) ]]; then
	echo "tmpfs /var/cache/samba tmpfs rw,noatime,nodev 0 0" >> /etc/fstab
fi
if [[ -z $(grep -i 'tmpfs /var/cache/apt/archives tmpfs rw,noatime,nodev 0 0' /etc/fstab) ]]; then
	echo "tmpfs /var/cache/apt/archives tmpfs rw,noatime,nodev 0 0" >> /etc/fstab
fi
if [[ -z $(grep -i 'tmpfs /var/cache/apt/apt-fast tmpfs rw,noatime,nodev 0 0' /etc/fstab) ]]; then
	echo "tmpfs /var/cache/apt/apt-fast tmpfs rw,noatime,nodev 0 0" >> /etc/fstab
fi
if [[ -z $(grep -i 'tmpfs /var/tmp tmpfs rw,noexec,nodev,noatime,nosuid 0 0' /etc/fstab) ]]; then
	echo "tmpfs /var/tmp tmpfs rw,noexec,nodev,noatime,nosuid 0 0" >> /etc/fstab
fi
if [[ -z $(grep -i 'proc /proc proc defaults,hidepid=2 0 0' /etc/fstab) ]]; then
	echo "proc /proc proc defaults,hidepid=2 0 0" >> /etc/fstab
fi
if [[ -z $(grep -i 'tmpfs /run tmpfs rw,nosuid,noexec,nodev,noatime,mode=755 0 0' /etc/fstab) ]]; then
	echo "tmpfs /run tmpfs rw,nosuid,noexec,nodev,noatime,mode=755 0 0" >> /etc/fstab
fi
if [[ -z $(grep -i 'tmpfs /dev/shm tmpfs defaults,nodev,nosuid,noexec 0 0' /etc/fstab) ]]; then
	echo "tmpfs /dev/shm tmpfs defaults,nodev,nosuid,noexec 0 0" >> /etc/fstab
fi
if [[ -f /etc/initramfs-tools/initramfs.conf ]]; then
	sed -i 's/MODULES=most/MODULES=dep/g' /etc/initramfs-tools/initramfs.conf
	update-initramfs -c -k all
fi
if ! [[ -f /root/.base ]]; then
	#echo "tmpfs /var/spool tmpfs rw,noatime,nodev 0 0" >> /etc/fstab
	sed -i "s/127.0.0.1\tlocalhost/127.0.0.1\tlocalhost $HOSTNAME/g" /etc/hosts
	sed -i 's/GRUB_TIMEOUT_STYLE=hidden/GRUB_TIMEOUT_STYLE=menu/g' /etc/default/grub
	sed -i 's/GRUB_TIMEOUT=0/GRUB_TIMEOUT=3/g' /etc/default/grub
	update-grub2
	touch /root/.base
fi
if ! [[ -f /home/$quien/.gnupg/gpg.conf.old ]]; then
	mkdir -p $gg
	mv -f $gdonde $gg/gpg.conf.old
	cp -f /usr/share/gpg.conf.sample $gdonde
	chown -R $quien:$quien $gg
	chmod -R 700 $gg
fi
if ! [[ -f /usr/bin/mizram ]]; then
	ln -s /etc/init.d/mizram /usr/bin/mizram
fi
if [[ -z $(grep -i lp /etc/modules) ]]; then
	echo "lp" >> /etc/modules
fi
if [[ -z $(grep -i freevxfs /etc/modules) ]]; then
	echo "freevxfs" >> /etc/modules
fi
if [[ -z $(grep -i jffs2 /etc/modules) ]]; then
	echo "jffs2" >> /etc/modules
fi
if [[ -z $(grep -i udf /etc/modules) ]]; then
	echo "udf" >> /etc/modules
fi
if [[ -z $(grep -i cramfs /etc/modules) ]]; then
	echo "cramfs" >> /etc/modules
fi
if [[ -z $(grep -i hfs /etc/modules) ]]; then
	echo "hfs" >> /etc/modules
fi
if [[ -z $(grep -i hfsplus /etc/modules) ]]; then
	echo "hfsplus" >> /etc/modules
fi
if [[ -z $(grep -i "alias rotorar='unrar e -kb -y'" /etc/bash.bashrc) ]]; then
	echo "alias rotorar='unrar e -kb -y'" >> /etc/bash.bashrc
fi
if [[ -z $(grep -i 'export HISTIGNORE="ls:clear"' /etc/bash.bashrc) ]]; then
	echo 'export HISTIGNORE="ls:clear"' >> /etc/bash.bashrc
fi
if [[ -z $(grep -i "shopt -s checkwinsize" /etc/bash.bashrc) ]]; then
	echo "shopt -s checkwinsize" >> /etc/bash.bashrc
fi
if [[ -z $(grep -i "HISTFILESIZE=2000" /etc/bash.bashrc) ]]; then
	echo "HISTFILESIZE=2000" >> /etc/bash.bashrc
fi
if [[ -z $(grep -i "HISTSIZE=1000" /etc/bash.bashrc) ]]; then
	echo "HISTSIZE=1000" >> /etc/bash.bashrc
fi
if [[ -z $(grep -i "HISTCONTROL=ignoreboth" /etc/bash.bashrc) ]]; then
	echo "HISTCONTROL=ignoreboth" >> /etc/bash.bashrc
fi
if [[ -z $(lscpu | grep GenuineIntel) ]]; then	
	if [[ -z $(grep -i 'INTEL_BATCH="1"' /etc/environment) ]]; then
		echo 'INTEL_BATCH="1"' >> /etc/environment
	fi
fi
if [[ -z $(grep -i "#kernel.kptr_restrict = 1" /etc/sysctl.d/10-kernel-hardening.conf) ]]; then
	sed -i 's/kernel.kptr_restrict = 1/#kernel.kptr_restrict = 1/g' /etc/sysctl.d/10-kernel-hardening.conf
fi
if [[ -z $(grep -i "#kernel.sysrq = 176" /etc/sysctl.d/10-magic-sysrq.conf) ]]; then
	sed -i 's/kernel.sysrq = 176/#kernel.sysrq = 176/g' /etc/sysctl.d/10-magic-sysrq.conf
fi	
if [[ -z $(grep -i "#net.ipv4.conf.default.rp_filter=2" /etc/sysctl.d/10-network-security.conf) ]]; then
	sed -i 's/net.ipv4.conf.default.rp_filter=2/#net.ipv4.conf.default.rp_filter=2/g' /etc/sysctl.d/10-network-security.conf
fi		
if [[ -z $(grep -i "#net.ipv4.conf.all.rp_filter=2" /etc/sysctl.d/10-network-security.conf) ]]; then
	sed -i 's/net.ipv4.conf.all.rp_filter=2/#net.ipv4.conf.all.rp_filter=2/g' /etc/sysctl.d/10-network-security.conf
fi	
if [[ -z $(grep -i "#kernel.yama.ptrace_scope = 1" /etc/sysctl.d/10-ptrace.conf) ]]; then
	sed -i 's/kernel.yama.ptrace_scope = 1/#kernel.yama.ptrace_scope = 1/g' /etc/sysctl.d/10-ptrace.conf
fi
if [[ -z $(grep -i 'WARNING: unauthorized access to this system is prohibited.' /etc/issue) ]]; then
	echo 'WARNING: unauthorized access to this system is prohibited.' >> /etc/issue
fi
if [[ -z $(grep -i 'WARNING: unauthorized access to this system is prohibited.' /etc/issue.net) ]]; then
	echo 'WARNING: unauthorized access to this system is prohibited.' >> /etc/issue.net
fi
if [[ -z $(grep -i '#Listen localhost:631' /etc/cups/cupsd.conf) ]]; then
	sed -i 's/Listen localhost:631/#Listen localhost:631/g' /etc/cups/cupsd.conf
	chmod 600 /etc/cups/cupsd.conf
fi
if [[ -f /etc/init.d/rc ]]; then
	sed -i 's/umask 022/umask 027/g' /etc/init.d/rc
fi
if [[ -f /etc/cups/cups-browsed.conf ]]; then
	sed -i 's/BrowseRemoteProtocols dnssd cups/BrowseRemoteProtocols none/g' /etc/cups/cups-browsed.conf
	sed -i 's/# BrowseProtocols none/BrowseProtocols none/g' /etc/cups/cups-browsed.conf
fi
if [[ -f /etc/avahi/avahi-daemon.conf ]]; then
	sed -i 's/#host-name=foo/enable-dbus=no/g' /etc/avahi/avahi-daemon.conf
fi
if [[ -f /etc/login.defs ]]; then
	sed -i 's/# SHA_CRYPT_MIN_ROUNDS 5000/SHA_CRYPT_MIN_ROUNDS 5000/g' /etc/login.defs
	sed -i 's/# SHA_CRYPT_MAX_ROUNDS 5000/SHA_CRYPT_MAX_ROUNDS 10000/g' /etc/login.defs
	sed -i 's/PASS_MAX_DAYS\t99999/PASS_MAX_DAYS\t180/g' /etc/login.defs
	sed -i 's/PASS_MIN_DAYS\t0/PASS_MIN_DAYS\t1/g' /etc/login.defs
	sed -i 's/UMASK\t\t022/UMASK\t\t027/g' /etc/login.defs
fi
if [[ -f /etc/adduser.conf ]]; then
	sed -i 's_DSHELL=/bin/bash_DSHELL=/usr/bin/fish_g' /etc/adduser.conf
fi
if [[ -f /etc/default/keyboard ]]; then
	sed -i 's/XKBOPTIONS=""/XKBOPTIONS="terminate:ctrl_alt_bksp"/g' /etc/default/keyboard
fi
if [[ -f /etc/passwd ]]; then
	sed -i 's_/bin/bash_/usr/bin/fish_g' /etc/passwd
fi
if [[ -f /etc/default/prelink ]]; then
	sed -i 's/PRELINKING=unknown/PRELINKING=yes/g' /etc/default/prelink
	sed -i 's/PRELINK_OPTS=-mR/PRELINK_OPTS=-amR/g' /etc/default/prelink
fi
if [[ -f /etc/rkhunter.conf ]]; then
	sed -i 's\UPDATE_MIRRORS=0\UPDATE_MIRRORS=1\g' /etc/rkhunter.conf
	sed -i 's\MIRRORS_MODE=1\MIRRORS_MODE=0\g' /etc/rkhunter.conf
	sed -i 's\WEB_CMD="/bin/false"\#WEB_CMD="/bin/false"\g' /etc/rkhunter.conf
	sed -i 's\SCRIPTWHITELIST=/usr/bin/egrep\SCRIPTWHITELIST=/bin/egrep\g' /etc/rkhunter.conf
	sed -i 's\SCRIPTWHITELIST=/usr/bin/fgrep\SCRIPTWHITELIST=/bin/fgrep\g' /etc/rkhunter.conf
fi
if [[ -f /etc/default/motd-news ]]; then
	sed -i 's\ENABLED=1\ENABLED=0\g' /etc/default/motd-news
fi
if [[ -f /etc/systemd/system.conf ]]; then
	sed -i 's\#DefaultTimeoutStopSec=90s\DefaultTimeoutStopSec=10s\g' /etc/systemd/system.conf
	sed -i 's\#CtrlAltDelBurstAction=reboot-force\CtrlAltDelBurstAction=reboot-force\g' /etc/systemd/system.conf
fi
if [[ -f /etc/xdg/autostart/tracker-miner-fs.desktop ]]; then
	mv -f /etc/xdg/autostart/tracker-miner-fs.desktop /root/
	mv -f /etc/xdg/autostart/tracker-extract.desktop /root/
	mv -f /etc/xdg/autostart/tracker-miner-apps.desktop /root/
	mv -f /etc/xdg/autostart/tracker-miner-user-guides.desktop /root/
	mv -f /etc/xdg/autostart/tracker-store.desktop /root/
	chmod 666 /usr/libexec/tracker-miner-fs
	#chmod 666 /usr/libexec/tracker-store
	chmod 666 /usr/libexec/tracker-extract
	chmod 666 /usr/libexec/tracker-writeback
	echo "TimeoutStartSec=2" >> /usr/share/dbus-1/services/org.freedesktop.Tracker1.service
fi
if [[ $(dpkg --get-selections | grep -w "ssh" | awk '{print $1}' | head -1) = ssh ]]; then
	mkdir -p $ss
	chown -R $quien:$quien $ss
	chmod -R 700 $ss
fi
if ! [[ -d /home/$quien/.config/autostart ]]; then
	mkdir -p /home/$quien/.config/autostart
fi
if ! [[ -d /etc/sysctl.d ]]; then
	mkdir -p /etc/sysctl.d
fi
yes "" | sensors-detect
echo "password requisite pam_cracklib.so retry=3 minlen=16 difok=3 ucredit=-1 lcredit=-2 dcredit=-2 ocredit=-2" > /etc/pam.d/common-password
echo "password [success=1 default=ignore] pam_unix.so obscure use_authtok try_first_pass sha512 rounds=65536" >> /etc/pam.d/common-password
echo "password requisite pam_deny.so" >> /etc/pam.d/common-password
echo "password required pam_permit.so" >> /etc/pam.d/common-password
echo "password optional pam_gnome_keyring.so" >> /etc/pam.d/common-password
echo "#!/bin/sh" > /usr/local/sbin/cgroup_clean
echo "rmdir /sys/fs/cgroup/cpu/$*" >> /usr/local/sbin/cgroup_clean
echo "# /etc/security/limits.conf" > /etc/security/limits.conf
echo "* hard core 0" >> /etc/security/limits.conf
echo "* hard nproc 1000" >> /etc/security/limits.conf
echo "* soft nofile 2000" >> /etc/security/limits.conf
echo "* hard nofile 2000" >> /etc/security/limits.conf
echo "# End of file" >> /etc/security/limits.conf
echo "net.ipv6.conf.all.disable_ipv6 = 1" > /etc/sysctl.d/60-disableipv6.conf
echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.d/60-disableipv6.conf
echo "net.ipv6.conf.lo.disable_ipv6 = 1" >> /etc/sysctl.d/60-disableipv6.conf
echo "kernel/mm/transparent_hugepage/enabled" = always > /etc/sysfs.conf
echo "kernel/mm/transparent_hugepage/khugepaged/pages_to_scan = 20000" >> /etc/sysfs.conf
echo "kernel/mm/ksm/run = 1" >> /etc/sysfs.conf
echo "kernel/mm/ksm/pages_to_scan = 20000" >> /etc/sysfs.conf
echo "kernel/mm/ksm/sleep_millisecs = 200" >> /etc/sysfs.conf
echo "fs/cgroup/cpu/notify_on_release = 1" >> /etc/sysfs.conf
echo "fs/cgroup/cpu/release_agent = /usr/local/sbin/cgroup_clean" >> /etc/sysfs.conf
#echo "devices/system/cpu/intel_pstate/no_turbo = 1" >> /etc/sysfs.conf
echo "[Journal]" > /etc/systemd/journald.conf
echo "SystemMaxUse=50M" >> /etc/systemd/journald.conf
echo "multi on" > /etc/host.conf
echo "order hosts,bind" >> /etc/host.conf
echo "SIZE=128M" > /etc/log2ram.conf
echo "USE_RSYNC=true" >> /etc/log2ram.conf
echo "MAIL=false" >> /etc/log2ram.conf
echo 'PATH_DISK="/var/log"' >> /etc/log2ram.conf
echo "ZL2R=false" >> /etc/log2ram.conf
echo "COMP_ALG=lz4" >> /etc/log2ram.conf
echo "LOG_DISK_SIZE=100M" >> /etc/log2ram.conf
sed -i 's/rotate 4/rotate 1/g' /etc/logrotate.conf
sed -i 's/weekly/daily/g' /etc/logrotate.conf
sed -i 's/rotate 7/rotate 1/g' /etc/logrotate.d/rsyslog
sed -i 's/rotate 4/rotate 1/g' /etc/logrotate.d/rsyslog
sed -i 's/weekly/daily/g' /etc/logrotate.d/rsyslog
sed -i 's/#SystemMaxFiles=100/SystemMaxFiles=7/g' /etc/systemd/journald.conf	
chmod 444 /usr/libexec/evolution-calendar-factory
chmod +x /usr/local/sbin/cgroup_clean
calcmem

echo "Finalizado $(date +%d/%m/%Y)" >> $mylog
echo "Duracion $SECONDS segundos" >> $mylog
echo "Duracion $SECONDS segundos"
echo "" >> $mylog
echo -e "\e[00;1;92mFinalizado. Se recomienda reiniciar el equipo.\e[00m"
exit 0
